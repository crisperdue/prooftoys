// Visit https://aka.ms/tsconfig to read more about this file

{
  "files": [
    "ts/global.d.ts",
    "ts/db.ts",
    "ts/site.ts", 
    "ts/util.ts", 
    "ts/prelim.ts", 
    "ts/expr.ts",
    "ts/xutil.ts",
    "ts/engine.ts",
    "ts/unify.ts",
    "ts/logic.ts",
    "ts/numbers.ts",
    "ts/derivatives.ts",
    "ts/trig.ts",
    "ts/natnums.ts",
    "ts/step-editor.ts",
    "ts/rendering.ts",
    "ts/solution-status.ts",
    "ts/proof-data.js",
    // Put a tsconfig.json file in the tests/ dir for this one:
    // "tests/tests.js",
    // The following are present basically to be copied to js/ folder.
    "ts/boilerplate.ts",
    "ts/canvas.js",
    "ts/jquery.tableofcontents.js",
    "ts/logic-pix.js",
    // Obsolete or under development:
    // "ts/deeper-fields.js",
    // "ts/nn.js",
    // "ts/sample-proofs.js",
    // "ts/worker.js",
    // Tests: "tests/tests.js",
  ],

  "compilerOptions": {
    "allowJs": true,
    "checkJs": false,
    "target": "es2020",
    // False value turns off incremental compilation,
    // at least does not write tsconfig.tsbuildinfo.
    "incremental": false,
    //
    // Directory structure
    "rootDir": "ts",
    // Emit a .d.ts for every TS or JS file in the project.
    "declaration": true,
    "declarationDir": "./dts",
    "outDir": "js",
    "lib": ["es2022", "dom", "dom.iterable"],
    // For compilation speed over accuracy:
    "skipLibCheck": true,
    "typeRoots": ["./node_modules/@types"],
    // The paths here define lookups of modules at compiletime. The
    // importmap in layouts/partials/prooftoys-scripts.html defines
    // runtime lookups of module references of the same form we see
    // here.
    "paths": {
        // This provides access to dexie.d.ts.
        "js/*": ["./node_modules/dexie/dist/*"],
     },
    // Transform module paths using package.json.
    // "resolvePackageJsonImports": true,
    // "resolvePackageJsonExports": true,
    // Output imports and exports just as written
    // (Hopefully this does not affect "import type ... ".)
    "module": "preserve",
    // The "bundler" value seems to keep behavior simple for webapps.
    "moduleResolution": "bundler",
    // Retain all import statements except "import type ... ".
    // "verbatimModuleSyntax": true,
    // Do not accept mismatched case even if the file system
    // doesn't care.
    "forceConsistentCasingInFileNames": true,
    // This might be nice if consuming UMD/AMD modules.
    // "esModuleInterop": true,
    // Unfortunately causes namespaces to be disallowed.
    // "verbatimModuleSyntax": true,
    "importsNotUsedAsValues": "remove",
    // "preserveValueImports": true,
    
    /* Projects */
    // "incremental": true,
    // "composite": true,
    // "tsBuildInfoFile": "./.tsbuildinfo",
    // "disableSourceOfProjectReferenceRedirect": true,
    // "disableSolutionSearching": true,
    // "disableReferencedProjectLoad": true,
    
    /* Language and Environment */
    // "experimentalDecorators": true,
    // "emitDecoratorMetadata": true,
    // "noLib": true,
    // "useDefineForClassFields": true,
    // "moduleDetection": "auto",
    
    /* Modules */
    // "rootDir": "./",
    // "baseUrl": "./",
    // "paths": {},
    // "rootDirs": [],
    // "typeRoots": [],
    // "types": [],
    // "allowUmdGlobalAccess": true,
    // "moduleSuffixes": [],
    // "allowImportingTsExtensions": true,
    // "resolvePackageJsonExports": true,
    // "resolvePackageJsonImports": true,
    // "customConditions": [],
    // "resolveJsonModule": true,
    // "allowArbitraryExtensions": true,
    // "noResolve": true,
    
    /* JavaScript Support */
    // "maxNodeModuleJsDepth": 1,
    
    /* Emit */
    // "declaration": true,
    // "declarationMap": true,
    // "emitDeclarationOnly": true,
    // "sourceMap": true,
    // "inlineSourceMap": true,
    // "outFile": "./",
    // "removeComments": true,
    // "noEmit": true,
    // "importHelpers": true,
    // "downlevelIteration": true,
    // "sourceRoot": "",
    // "mapRoot": "",
    // "inlineSources": true,
    // "emitBOM": true,
    // "newLine": "crlf",
    // "stripInternal": true,
    // "noEmitHelpers": true,
    // "noEmitOnError": true,
    // "preserveConstEnums": true,
    // "declarationDir": "./",
    
    /* Interop Constraints */
    // "isolatedModules": true,
    // "isolatedDeclarations": true,
    // "allowSyntheticDefaultImports": true,
    // "preserveSymlinks": true,
    
    /* Type Checking */
    // "strict": true,
    // "noImplicitAny": true,
    // "strictNullChecks": true,
    // "strictFunctionTypes": true,
    // "strictBindCallApply": true,
    // "strictPropertyInitialization": true,
    // "noImplicitThis": true,
    // "useUnknownInCatchVariables": true,
    // "alwaysStrict": true,
    // "noUnusedLocals": true,
    // "noUnusedParameters": true,
    // "exactOptionalPropertyTypes": true,
    // "noImplicitReturns": true,
    // "noFallthroughCasesInSwitch": true,
    // "noUncheckedIndexedAccess": true,
    // "noImplicitOverride": true,
    // "noPropertyAccessFromIndexSignature": true,
    // "allowUnusedLabels": true,
    // "allowUnreachableCode": true,
    
    /* Completeness */
    // "skipDefaultLibCheck": true,
  }
}
